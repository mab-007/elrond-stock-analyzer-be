// This code runs inside an n8n 'Code' node.
// It expects an array of JSON data from the previous node as input.

// In your n8n Code node, you might need to use $input.all() to get all items as an array
// For testing, we'll assume 'items' is an array of your JSON objects.
const items = $input.all();

// If there's no data or it's not an array, return a simple message.
if (!items || items.length === 0) {
    return { json: { html_output: "<html><body>No data provided.</body></html>" } };
}

// Extract the core JSON data from the n8n item structure.
const allData = items.map(item => item.json);

// --- Main HTML and JavaScript Generation ---

// Generate the list items for the left navigation bar.
const navLinks = allData.map((company, index) => `
    <a href="#" 
       class="nav-item block w-full text-left px-4 py-3 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 focus:outline-none focus:bg-blue-50 focus:text-blue-700" 
       data-company-index="${index}">
        ${company.company_name}
    </a>
`).join('');

// Use a template literal (backticks ``) to build the entire HTML page structure.
const finalHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Report Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); padding: 1.5rem; }
        .metric-label { color: #6b7280; font-size: 0.875rem; font-weight: 500; }
        .metric-value { color: #111827; font-size: 1.5rem; font-weight: 700; }
        .positive { color: #10b981; }
        .negative { color: #ef4444; }
        .strongly-positive { background-color: #d1fae5; color: #065f46; }
        .strongly-negative { background-color: #fee2e2; color: #991b1b; }
        .impact-badge { display: inline-block; padding: 0.25rem 0.75rem; border-radius: 9999px; font-weight: 600; font-size: 0.875rem; text-transform: uppercase; }
        .nav-item.active { background-color: #eff6ff; color: #1d4ed8; font-weight: 600; }
    </style>
</head>
<body class="h-screen overflow-hidden">
    <div class="flex h-full">
        <!-- Left Vertical Navbar -->
        <nav class="w-1/4 max-w-xs flex-shrink-0 bg-white border-r border-gray-200 overflow-y-auto">
            <div class="p-4">
                <h2 class="text-lg font-bold text-gray-800 mb-4">Companies</h2>
                <div id="company-nav" class="space-y-1">
                    ${navLinks}
                </div>
            </div>
        </nav>

        <!-- Main Content Area -->
        <main id="dashboard-container" class="flex-1 p-4 sm:p-6 md:p-8 overflow-y-auto">
            <!-- Selected company dashboard will be displayed here by JavaScript -->
        </main>
    </div>

    <script>
        // --- Client-Side JavaScript for Interactivity ---
        const allCompanyData = ${JSON.stringify(allData)};
        
        const navContainer = document.getElementById('company-nav');
        const dashboardContainer = document.getElementById('dashboard-container');

        // Helper functions
        function getImpactClass(impact) {
            if (!impact) return 'bg-gray-200 text-gray-800';
            const lowerImpact = impact.toLowerCase();
            if (lowerImpact.includes('positive')) return 'strongly-positive';
            if (lowerImpact.includes('negative')) return 'strongly-negative';
            return 'bg-gray-200 text-gray-800';
        }

        function formatNumber(num) {
            if (num === null || num === undefined) return 'N/A';
            return new Intl.NumberFormat('en-IN').format(num);
        }

        // Function to generate the HTML for a single company's dashboard
        function generateDashboardHTML(data) {
            if (!data) return '<p class="text-center text-gray-500">Select a company to view details.</p>';
            
            const changeClass = parseFloat(data.percentageChange) >= 0 ? 'positive' : 'negative';
            const changeSymbol = parseFloat(data.percentageChange) >= 0 ? '▲' : '▼';

            const financials = [
                { label: 'Sales', data: data.sales },
                { label: 'Operating Profit', data: data.operating_profit },
                { label: 'Profit Before Tax', data: data.profit_before_tax },
                { label: 'Net Profit', data: data.net_profit }
            ];
            
            const quarters = Object.keys(data.sales || {});

            return \`
                <div class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">\${data.company_name}</h1>
                        <p class="text-md text-gray-500">Scrip ID: \${data.scrip_id}</p>
                    </div>
                    <a href="\${data.pdf_link}" target="_blank" class="inline-block bg-blue-600 text-white font-semibold px-5 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow">View Report PDF</a>
                </div>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                    <div class="card"><p class="metric-label">Analyst Target Price</p><p class="metric-value">₹\${formatNumber(data.target_price_mean)}</p><p class="text-sm text-gray-500 mt-1">\${data.number_of_estimate} Estimates</p></div>
                    <div class="card"><p class="metric-label">Analyst Impact</p><div class="mt-2"><span class="impact-badge \${getImpactClass(data.imapct)}">\${data.imapct}</span></div></div>
                    <div class="card"><p class="metric-label">Potential Price Range</p><p class="metric-value">\${data.price_range}</p><p class="text-sm text-gray-500 mt-1">Mid-point: \${data.mid_percentage}%</p></div>
                    <div class="card"><p class="metric-label">Impact Score</p><p class="metric-value \${changeClass}">\${data.impact_score} / 5</p></div>
                </div>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                    <div class="card"><p class="metric-label">Current Price (NSE)</p><p class="metric-value">₹\${data.current_price_nse}</p><p class="font-semibold text-lg \${changeClass}">\${changeSymbol} \${data.percentageChange}%</p></div>
                    <div class="card"><p class="metric-label">Current Price (BSE)</p><p class="metric-value">₹\${data.current_price_bse}</p></div>
                    <div class="card"><p class="metric-label">52-Week High</p><p class="metric-value">₹\${data.year_high}</p></div>
                    <div class="card"><p class="metric-label">52-Week Low</p><p class="metric-value">₹\${data.year_low}</p></div>
                </div>
                <div class="card overflow-x-auto">
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Quarterly Financials (in Cr.)</h2>
                    <table class="w-full text-left">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="p-3 font-semibold text-sm text-gray-600">Metric</th>
                                \${quarters.map(q => \`<th class="p-3 font-semibold text-sm text-gray-600 text-right">\${q}</th>\`).join('')}
                            </tr>
                        </thead>
                        <tbody>
                            \${financials.map(fin => \`
                                <tr class="border-b border-gray-200 hover:bg-gray-50">
                                    <td class="p-3 font-medium text-gray-800">\${fin.label}</td>
                                    \${quarters.map(q => {
                                        const value = fin.data[q];
                                        const valueClass = value >= 0 ? 'text-gray-900' : 'text-red-600';
                                        return \`<td class="p-3 text-right font-mono \${valueClass}">\${formatNumber(value)}</td>\`
                                    }).join('')}
                                </tr>
                            \`).join('')}
                        </tbody>
                    </table>
                </div>
            \`;
        }
        
        // Function to display a company's data and update the UI
        function displayCompany(index) {
            const companyData = allCompanyData[index];
            dashboardContainer.innerHTML = generateDashboardHTML(companyData);

            // Update active state in navbar
            document.querySelectorAll('.nav-item').forEach((item, itemIndex) => {
                if(itemIndex === index) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }

        // Add event listener to the navigation container
        navContainer.addEventListener('click', function(event) {
            event.preventDefault();
            const navItem = event.target.closest('.nav-item');
            if (navItem) {
                const companyIndex = parseInt(navItem.dataset.companyIndex, 10);
                displayCompany(companyIndex);
            }
        });

        // Initial load: Display the first company in the array
        if (allCompanyData.length > 0) {
            displayCompany(0);
        }
    </script>
</body>
</html>
`;

// Return the final HTML as a new property in the JSON output.
// This makes it available for the next node.
return {
  json: {
    html_output: finalHtml
  }
};

